{"ast":null,"code":"var _jsxFileName = \"/Users/tarick/Documents/GitHub/itunes-app/frontend/src/components/Itunes.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Favorites from './Favorites';\nimport Header from './Header';\nimport Results from './Results';\nimport Search from './Search';\nimport Modal from './Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Set up state variables for search term, media type, search results, and favorites\n  const [term, setTerm] = useState('');\n  const [media, setMedia] = useState('');\n  const [searchResults, setSearchResults] = useState('');\n  const [favorites, setFavorites] = useState([]);\n  const [showModal, setShowModal] = useState(false); // new state variable for the modal\n\n  // Function to handle the search button click event\n  const handleSearch = async () => {\n    try {\n      // Make a GET request to the server API with the search term and media type\n      const response = await fetch(`/api/search?term=${term}&media=${media}`);\n      console.log(response);\n      // Parse the JSON response data and update the search results state variable\n      const data = await response.json();\n      setSearchResults(data.results);\n      console.log(data.results);\n    } catch (error) {\n      // Log any errors to the console\n      console.error(error);\n    }\n  };\n\n  // Function to add an item to the favorites list\n  const handleFavorite = item => {\n    // Check if the item is already in the favorites array\n    const alreadyAdded = favorites.some(favorite => favorite.trackId === item.trackId);\n\n    // Only add the item if it hasn't been added before\n    if (!alreadyAdded) {\n      // Update the favorites state variable by creating a new array with the current favorites and the new item\n      setFavorites([...favorites, item]);\n    }\n  };\n\n  // Function to remove an item from the favorites list\n  const handleRemoveFavorite = item => {\n    // Update the favorites state variable by creating a new array with all favorites except the one being removed\n    setFavorites(favorites.filter(favorite => favorite.trackId !== item.trackId));\n  };\n\n  // Function to toggle the display of the modal\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  // Render the search input, search results, and favorites list\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      term: term,\n      setTerm: setTerm,\n      toggleFavorites: toggleModal // update the toggleFavorites prop to toggle the modal instead of the favorites component\n      ,\n      handleSearch: handleSearch,\n      media: media,\n      setMedia: setMedia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(Results, {\n      searchResults: searchResults,\n      handleFavorite: handleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), showModal &&\n    /*#__PURE__*/\n    // render the modal only if showModal is true\n    _jsxDEV(Modal, {\n      onClose: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(Favorites, {\n        favorites: favorites,\n        handleRemoveFavorite: handleRemoveFavorite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X8flHmAW1A5kmMVDV3Y1u5DvXxs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Favorites","Header","Results","Search","Modal","jsxDEV","_jsxDEV","App","_s","term","setTerm","media","setMedia","searchResults","setSearchResults","favorites","setFavorites","showModal","setShowModal","handleSearch","response","fetch","console","log","data","json","results","error","handleFavorite","item","alreadyAdded","some","favorite","trackId","handleRemoveFavorite","filter","toggleModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toggleFavorites","length","onClose","_c","$RefreshReg$"],"sources":["/Users/tarick/Documents/GitHub/itunes-app/frontend/src/components/Itunes.js"],"sourcesContent":["import { useState } from 'react';\nimport Favorites from './Favorites';\nimport Header from './Header';\nimport Results from './Results';\nimport Search from './Search';\nimport Modal from './Modal';\n\nfunction App() {\n  // Set up state variables for search term, media type, search results, and favorites\n  const [term, setTerm] = useState('');\n  const [media, setMedia] = useState('');\n  const [searchResults, setSearchResults] = useState('');\n  const [favorites, setFavorites] = useState([]);\n  const [showModal, setShowModal] = useState(false); // new state variable for the modal\n\n  // Function to handle the search button click event\n  const handleSearch = async () => {\n    try {\n      // Make a GET request to the server API with the search term and media type\n      const response = await fetch(`/api/search?term=${term}&media=${media}`);\n      console.log(response)\n      // Parse the JSON response data and update the search results state variable\n      const data = await response.json();\n      setSearchResults(data.results);\n      console.log(data.results)\n    } catch (error) {\n      // Log any errors to the console\n      console.error(error);\n    }\n  };\n\n  // Function to add an item to the favorites list\n  const handleFavorite = (item) => {\n    // Check if the item is already in the favorites array\n    const alreadyAdded = favorites.some((favorite) => favorite.trackId === item.trackId);\n    \n    // Only add the item if it hasn't been added before\n    if (!alreadyAdded) {\n      // Update the favorites state variable by creating a new array with the current favorites and the new item\n      setFavorites([...favorites, item]);\n    }\n  };\n  \n\n  // Function to remove an item from the favorites list\n  const handleRemoveFavorite = (item) => {\n    // Update the favorites state variable by creating a new array with all favorites except the one being removed\n    setFavorites(favorites.filter((favorite) => favorite.trackId !== item.trackId));\n  };\n\n  // Function to toggle the display of the modal\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  // Render the search input, search results, and favorites list\n  return (\n    <div className=\"main-container\">\n      <Header />\n      <Search\n        term={term}\n        setTerm={setTerm}\n        toggleFavorites={toggleModal} // update the toggleFavorites prop to toggle the modal instead of the favorites component\n        handleSearch={handleSearch}\n        media={media}\n        setMedia={setMedia}\n        />\n      {searchResults.length > 0 &&\n      <Results\n        searchResults={searchResults}\n        handleFavorite={handleFavorite}\n        />}\n      {showModal && // render the modal only if showModal is true\n      <Modal onClose={toggleModal}>\n        <Favorites\n          favorites={favorites}\n          handleRemoveFavorite={handleRemoveFavorite}\n        />\n      </Modal>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}